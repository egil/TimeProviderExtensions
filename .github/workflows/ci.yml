# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: ci
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'main'       # Run the workflow when pushing to the main branch
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_id || github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget
  TestResultsDirectory: ${{ github.workspace}}/TestResults
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  create-nuget:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          3.1.x
          6.0.x
          8.0.x

    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }}

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v3
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  validate-nuget:
    runs-on: ubuntu-latest
    needs: [ create-nuget ]
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3

      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Install nuget validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      # Validate metadata and content of the NuGet package
      # https://www.nuget.org/packages/Meziantou.Framework.NuGetPackageValidation.Tool#readme-body-tab
      # If some rules are not applicable, you can disable them
      # using the --excluded-rules or --excluded-rule-ids option
      - name: Validate package
        shell: pwsh
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg") --excluded-rules IconMustBeSet

  run-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        framework: [ netcoreapp3.1, net6.0, net8.0 ]
      fail-fast: false
    env:
      TestResultsDirectory: ${{ github.workspace }}/TestResults
    permissions:
      checks: write
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          3.1.x
          6.0.x
          8.0.x

    - name: Run tests
      run: dotnet test --configuration Release --framework ${{ matrix.framework }} --logger trx --results-directory "${{ env.TestResultsDirectory }}" --collect:"XPlat Code Coverage" --blame-hang --blame-hang-timeout 5min

    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.framework }}
        if-no-files-found: error
        retention-days: 3
        path: ${{ env.TestResultsDirectory }}/**/*

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: github.actor != 'dependabot[bot]' && (success() || failure()) && github.repository_owner == 'egil'
      with:
        name: test-results-${{ matrix.framework }}
        path: ${{ env.TestResultsDirectory }}/**/*.trx
        path-replace-backslashes: 'true'
        reporter: dotnet-trx

  run-stryker:
    runs-on: ubuntu-latest
    env:
      StrykerDirectory: ${{ github.workspace }}/Stryker
    permissions:
      statuses: write
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          3.1.x
          6.0.x
          8.0.x

    - name: Install Stryker.NET
      run: dotnet tool install -g dotnet-stryker

    - name: Run Stryker.NET
      id: stryker
      run: |
        cd test/TimeProviderExtensions.Tests
        dotnet stryker --config-file "../../stryker-config.json" --dashboard-api-key "${{ secrets.STRYKER_DASHBOARD_API_KEY }}" --version ${{ env.BRANCH_NAME }} --output ${{ env.StrykerDirectory }}

    - run: |
        cat ${{ env.StrykerDirectory }}/reports/mutation-report.md >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View the [full report](https://dashboard.stryker-mutator.io/reports/github.com/egil/TimeProviderExtensions/${{ env.BRANCH_NAME }})." >> $GITHUB_STEP_SUMMARY

    - name: Stryker Report
      if: github.actor != 'dependabot[bot]' && (success() || failure()) && github.repository_owner == 'egil'
      uses: Sibz/github-status-action@v1
      with:
        authToken: ${{secrets.GITHUB_TOKEN}}
        context: "${{ github.workflow}} / stryker-report (${{ github.event_name }})"
        description: "See report"
        state: ${{ steps.stryker.conclusion }}
        sha: ${{ github.event.pull_request.head.sha || github.sha }}
        target_url:  https://dashboard.stryker-mutator.io/reports/github.com/egil/TimeProviderExtensions/${{ env.BRANCH_NAME }}

    - uses: actions/upload-artifact@v3
      if: steps.stryker.conclusion == 'success' || steps.stryker.conclusion == 'failure'
      with:
        name: stryker-reports
        if-no-files-found: error
        retention-days: 3
        path: ${{ env.StrykerDirectory }}/**/*

  dependency-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: github.event_name == 'pull_request' && github.repository_owner == 'egil'
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v3
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v3

  infer-sharp:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          3.1.x
          6.0.x
          8.0.x

    - run: dotnet build --configuration Release

    - name: Run Infer#
      uses: microsoft/infersharpaction@v1.5
      id: runinfersharp
      with:
        binary-path: ./src/TimeProviderExtensions/bin/Release/net8.0

    - name: Create step summary
      run: |
        echo # Infer# report >> $GITHUB_STEP_SUMMARY
        echo ``` >> $GITHUB_STEP_SUMMARY
        cat infer-out/report.txt >> $GITHUB_STEP_SUMMARY
        echo ``` >> $GITHUB_STEP_SUMMARY

    - name: Upload Infer# report as an artifact
      uses: actions/upload-artifact@v2
      with:
        name: infer-sharp-report
        path: infer-out/report.txt

    - name: Upload SARIF output to GitHub Security Center
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: infer-out/report.sarif

  deploy:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ validate-nuget, run-test, dependency-review ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        shell: pwsh
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
